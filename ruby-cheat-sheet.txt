
#<TODO>
=begin
-all of the array subroutines/functions/methods-to-call
 and all of their other valid names in other programming languages
-same with Math.*
-same with String.*
-same with ANumber.* 
=end
#</TODO>

#<note>these variable names are conventionally proper</note>
my_var = 3.14
my_var2 = true
my_var3 = [ 'wo', 'rl', 'd' ]
my_var4 = 'a string'

puts 'hello'
print my_var3 #<prints>['wo', 'rl', 'd']</prints>
puts '!'
puts my_var2 #<prints>true</prints>

puts "#{my_var2}" #<prints>true</prints>
# <doesn't-work> puts '' + str(my_var2) #true </doesn't-work>
=begin
extra information:
my_var2.to_i (to integer) Unable to convert boolean to integer
my_var2.to_f (to float)
=end
puts '' + my_var2.to_s #<prints>true</prints>
puts '' + my_var4 #<prints>a string</prints>
puts '' + 2.71.to_i.to_s #<prints>2</prints>

#<note><note-idea>the .length function is the same as arrays. this substr() fxns work just like fetching indeces from an array.</note-idea>
puts my_var.to_s.length #<prints>4</prints>
puts my_var.to_s()[0, 2] #IE. .substr(INDEX, LEN=1) where the 2nd argument is the LENGTH <prints>3.</prints>
puts my_var.to_s()[0..1] #IE. .substr(INDEX0, INDEX1)
#</note>
puts my_var.to_s()[0] #<prints>3</prints>
puts my_var.to_s().include? '14' #IE. 'is this substring within this larger string?' <prints>true</prints>

puts my_var.round() #<prints>3</prints>
puts 3.14.round() #<prints>3</prints>
puts 3.54.round() #<prints>4</prints>
puts Math.sqrt(my_var); #<prints>1.772004514666935</prints>

=begin
<sz = STDIO.getLine()>
  sz = gets.chomp
</*>

<ar-functions>
my_ar.sort
my_ar.reverse
my_ar.push('putThisStringInTheArrayAtTheEnd')
my_ar.pop #<note>the last index gets removed forever</note>
my_ar.include? <note>boolean ArrayHasThisInArray(my_ar, szNeedle)</note>
</ar-functions>

<uniq-functions>
function myFunction(_sz='defaultString'){
  return _sz + 'thisIsAppended';
}
function my_function(_sz='defaultString'){
  return _sz + 'thisIsAppended';
}
def my_function(_sz='defaultString'){
  return _sz + 'thisIsAppended';
}
def my_function(_sz='defaultString')
  return _sz + 'thisIsAppended';
end
def my_function(_sz='defaultString')
  return _sz + 'thisIsAppended'
end

<notice>the last function definition is correct</notice>
</uniq-functions>

<if-statements>
var arTruth = true;
if(arTruth && arTruth)
  puts 'we are most definitely true'

ar_truth = true
if ar_truth and ar_truth
  puts 'we are most definitely true'
end

<notice>the last expression is correct</notice>
<note>elsif, and else</note>
<note>< > <= >= == != for numbers and string comparison</note>
</if-statements>


<super-if-statementAKAswitch-statement>
var my_var = 'c';
switch(my_var){
case 'a':
puts('Ayyyy');
break;
case 'b':
puts('Bayyy');
break;
case 'c':
puts('Say');
break;
default:
puts('none of the above');
}

my_var = 'c'
case my_var
when 'a'
puts('Ayyyy')
when 'b'
puts('Bayyy')
when 'c'
puts('Say')
else
puts('none of the above')
end
</super-if-statementAKAswitch-statement>

<hash-arrays>
%my_hash = {
'a' => 'Ayyyy',
'b' => 'Bayy',
'c' => 'Say',
:d => 'Die'
}

my_hash = {
'a' => 'Ayyyy'
'b' => 'Bayy'
'c' => 'Say'
:d => 'Die'
}

my_hash = { #you can use numbers too
'a' => 'Ayyyy',
'b' => 'Bayy',
'c' => 'Say', #and you can access the hash with these strings
:d => 'Die'
}
puts my_hash[:d]
</hash-arrays>

<while-loops>
var i=0;
while i < 5
i++
end
</while-loops>

<for-loops>
<note>all of these are valid</note>
for i in 0..5
puts(i)
end

for i in arList
puts(i)
end

arList.each do |i|
puts(i)
end

5.times do |i|
puts(i)
end
</for-loops>

<ASSERT(false)>
raise 'Exception123' #<note>will give the line number in the src code to the error</note>
</ASSERT(false)>

<OO>
<the-first-one-is-wrong />
class MyClassName
  attr_ :a, :b
  def printName()
    puts 'Name: ' + self.a + ' ' + self.b;
  end
end
c = new MyClassName()
c.a = 'Anonymous'
c.b = 'Pony'
c.printName()

class MyClassName
  attr_accessor :a, :b
  def printName()
    puts 'Name: ' + self.a + ' ' + self.b
  end
end
c = MyClassName.new()
c.a = 'Anonymous'
c.b = 'Pony'
c.printName()
puts 'Name: ' + c.a + ' ' + c.b
</OO>

<OO2>
<first-one-is-wrong />
class MyClassName
  attr_accessor :a, :b
  def MyClassName(_a, _b)
    self.a = _a
    self.b = _b
  end
end
c = MyClassName.new('Bull', 'Shit')
puts c.a + c.b

class MyClassName
  attr_accessor :a, :b
  def initialize(_a, _b)
    @a = _a
    @b = _b
  end
end
c = MyClassName.new('Bull', 'Shit')
puts c.a + c.b
</OO2>

<OO3>
class MyClassName
  attr_accessor :a, :b
  def get_a
    return @a
  end
  def set_a=(_a)
    @a = _a
  end
end
c = MyClassName.new()
c.set_a = 'Bull'
puts c.get_a
</OO3>

<OO4>
class SubClass < SuperClass
#all methods/subroutines are inherited
</OO4>

=end
